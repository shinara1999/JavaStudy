package com.sist.main;
/*
 * 		1. 객체지향 프로그램
 * 		----------------
 * 		클래스 => 만드는 목적
 * 			1) 재사용이 가능
 * 			   = 상속 => 기존의 클래스를 변경해서 사용할 목적
 * 				 class GenieMusic
 * 				 => class Melon extends GenieMusic
 * 						  ------------------------ 기존의 클래스를 확장
 * 			   = 포함 => 기존의 클래스를 그대로 사용
 * 				 class Melon
 * 				 {
 * 					GenieMusic gm=new GenieMusic();
 * 				 }	
 * 			2) 필요한 데이터를 보호 : 데이터 보호 (캡슐화)
 * 			   => 접근지정어 : private => 클래스에서 사용하는 멤버변수는 은닉화 => 메소드에서 기능을 제작	
 * 																		----------------- 읽기 (getter) 쓰기 (setter)
 * 			3) 수정이 가능 / 추가 가능 => 다형성
 * 			   ---------  -------
 * 			    오버라이딩   오버로딩
 * 			--------------------------------------------------------------------------------------------------------
 * 			목적 => 유지보수가 쉽게 함
 * 				   개발 => 개발 / 유지보수
 * 						 (1년) (10~15년)
 * 		2. 클래스를 만드는 과정
 * 			1) 클래스 구성요소
 * 			------------------------
 * \		예)
 * 				String name; => 자동 초기화 : class인 경우 null
 * 				null => 클래스 객체는 반드시 메모리 주소(주소가 지정이 안된 경우)
 * 				A a; => null (a-null)
 * 					a= new A(); ==> *** NullPointerException
 * 				int age; => 0 
 * 				String address => null
 * 				String phone => null
 * 				double ki => 0.0
 * 				char c; => '\0'
 * 				boolean b; => false ==> 한번을 메모리에 저장
 * 						   => 필요한 값으로 변경해서 사용	
 * 							  ---------------------
 * 								초기화 블록 / 생성자
 * 				==> 권장
 * 				String name, address, phone...
 * 				***** 데이터(변수)는 반드시 외부에서 접근, 변경, 손 private ==> 모든 변수
 * 
 * 				*** 컴파일러가 자동 생성
 * 				1) import : import java.lang.*
 * 							------------------
 * 								ㅣString , System , Math
 * 				2) void method()
 * 				   {
 * 						return; => 생략하는 경우 : 자동 추가된다.
 * 			   	   }
 * 				3) 자바의 모든 클래스는 Object클래스 상속
 * 								   ---------------
 * 				   class A extends Object
 * 						  --------------- Object에서 지원하는 모든 베소드 사용 가능
 * 				4) 생성자가 없는 경우 다농으로 디폴트 생성자 추가
 * 				5) 자바의 모든 클래스는 예외처리를 가지고 있다.
 * 								   -------
 * 
 * 				1) 역할
 * 				2) 특징
 * 				3) 사용처
 * 
 * 				static 블록 => 자동으로 메모리 할당 => 생성자를 사용하지 않아도 된다.
 * 				class A
 * 				{
 * 					static int a; // 생성자호출 없이도 사용이 가능하다.
 * 					static
 * 					{
 * 						a=100;
 * 					}
 * 				}
 * 				A aa=new A(); => aa.a
 * 				A.a
 * 
 * 				*** 주의점
 * 				인스턴스 블록 / static 블록
 * 				class A
 * 				{
 * 					int a;
 * 					static int b;
 * 					{
 * 						a=100;
 * 						b=200;
 * 					}
 * 					static        ===> 오류발생 
 * 					{
 * 						a=1000;  => static 안에서는 객체 생성 후에 변수를 사용할 수 있다.
 * 						b=2000;     또는 static인 경우에만 사용 가능
 * 					}
 * 				}
 * 
 * 				초기값에 대한 호출 순서
 * 				1) 명시적인 초기화
 * 					int a=10; => 우선시
 * 				2) 초기화블록
 * 				3) 생성자
 * 				***** 변수
 * 						멤버변수 / static 변수 / 지역변수
 * 						----------------------------
 * 							ㅣ 반드시 초기화를 해서 사용
 * 				---------------------------------------------------------------
 * 				메소드 => 다른 클래스와 통신 => public
 * 						--------------
 * 				형식)
 * 					멤버메소드
 * 					public 리턴형 메소드명(매개변수목록) > 선언부
 * 					{
 * 						구현부
 * 					}
 * 					static 메소드
 * 					public static 리턴형 메소드명(매개변수목록) => 선언부
 * 					{
 * 						구현부
 * 						=> 인스턴스는 변수, 메소드 사용 가능
 * 						=> static 메소드나 static 변수 사용 가능
 * 					}
 * 					=> 호출 => 클래스명.메소드()
 * 					   Math.random()
 * 
 * 					String s="";
 * 					s.substring()
 * 					s.trim()
 * 					s.replace()
 * 					------------- 멤버메소드
 * 					String.valueOf() --- static 메소드
 * 
 * 					Calendar c=Calendar.getInstance()
 * 					
 * 				---------------------------------------------------------------
 * 			  	*** 코드영역
 * 				class
 * 				{
 * 					선언만 가능 : 변수 선언 , 메소드 선언
 * 								=> 메소드 호출, 연산자 처리, 제어문 사용(X)
 * 				}
 * 				method
 * 				{
 * 					선언(지역변수), 메소드 호출, 연산처리, 제어문 => 사용자요청 => 처리 => 결과값 전솔
 * 				}
 * 				메소드 => 생성자 , 초기화블록 (구현)
 * 				*** 사용자 정의로 만든 메소드 , 생성자
 * 					=> 반드시 호출 (자동호출이 없다.)	
 * 					=> 초기화 블록 => 컴파일러에 의해 한번만 수행
 * 				==> CRUD
 * 					회원가입 / 화원정보 / 회원수전 / 회원탈퇴 => 면접 : 게시판
 * 
 * 			2) 메모리 저장
 * 			3) 활용 (호출)
 * 		3. 클래스의 종류
 * 			1. 일반클래스
 * 			2. 추상클래스
 * 			3. 인터페이스
 * 			4. 내부클래스	
 * 				= 멤버클래스, 지역클래스, 익명 클래스	
 * 			5. 종단클래스 : final v
 * 		4. 비정상 종료를 방지하는 프로그램 구현 => 예외처리
 * 			------------------------------------- 자바 기초
 * 		= 메소드명
 * 			***	변수 명칭법과 동일 (식별자)
 * 			*** 길이의 제한은 없다. => 가급적이면 압축
 * 								   (5~12)
 * 			*** 자바 개발자의 약속 => 소문자로 시작
 * 				=> 소프트웨어 이행 : 영문을 사용한다
 * 				   -----------
 * 					서버는 리눅스 => 차세대 운영체제 (우분투)
 * 							   => 우분투 (AWS)
 * 					개발 : 윈도우/맥 => 호스팅 : 리눅스
 * 					=> 프로젝트 : GIT(원격) => 경로명
 * 		= 매개변수
 * 			사용자 요청 값 => 로그인(id, pwd, check)
 * 			=> 사용자의 입력 , 마우스 클릭 , 키보드 이용 => 매개변수로 처리
 * 			=> 매개변수의 갯수는 제한이 없다. => 가급적이면 작게 사용한다.
 * 									      --------------------
 * 												ㅣ 3개
 * 											3개이상이면 모아서 전송
 * 											------------------
 * 												배열, 클래스
 * 			=> 매개변수는 메모리 할당 => 메소드 호출시마다 메모리 생성
 * 			=> 매개변수는 지역변수의 일종 => 메소드 농료되면 자동으로 사라진다.
 * 				=> 자동 해제 (메모리에서 자동 처리)
 * 				=> 초기값을 주는 경우
 * 				   메소드 호출시에는 초기화를 해준다.
 * 				예) 
 * 					public void disp(int a)
 * 					{
 * 					}
 * 		
 * 					disp(10) => 매개변수의 값을 설정한다.
 * 					-------- 호출
 * 			***** 클래스도 데이터형이다.
 * 				  ----------------- (형변환) => 상속
 * 			
 */
public class MainClass {
	int a=100;
	static int b=200;
	public static void aaa()
	{
		MainClass m=new MainClass();
		System.out.println(m.a);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
