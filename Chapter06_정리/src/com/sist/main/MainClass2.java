package com.sist.main;
/*
 * 		1. 객체지향 프로그램 => Application, Web Application
 * 							-----------  ---------------
 * 											ㅣ 캡슐화, 인터페이스
 * 											=> 연산자, 제어문, 메소드
 * 											=> 데이터베이스 연동
 * 											   -------------
 * 			= 코드의 재사용이 높다. (기존의 코드를 변경, 추가)
 * 			= 코드관리가 용이하다. (구조적 프로그램 => 메소드로 기능 구분)
 * 			= 이미 사용중인 프로그램을 이용 => 신뢰성이 높다.
 * 			= 대규모 프로젝트에 주로 사용
 * 			  ---------------------
 * 				ㅣ Model 1   => 홈페이지, 소규모 회사
 * 				  -------- 통으로 프로그램 구현 (개인)
 * 				  Model 2(O) => 공기업, 금융권 
 * 				  ---------- Front, Back, DataBase ==> MVC
 * 				  Spring (MVC) => Front (MVC=>VueX, Redux)
 * 													  ㅣ
 * 													React-Query
 * 				  => 한 개의 서버에서 작업 => 서버 점검시에 서비스 중단
 * 					 -----------------
 * 						ㅣ 여러개의 서버로 나눠서 작업 (MSA)
 * 						   => Spring Cloud
 * 						   => 데이터 분석 => 지능형 웹
 * 			= 클래스 구성
 * 			  ---- 공통적인 데이터, 기능을 모아서 저장 => 사용
 * 				   ------------ ----
 * 					멤버변수		메소드
 * 					  ㅣ
 * 					사람 : 이름, 나이, 키, 성별...
 * 					---------------------------
 * 					사물을 단순화 => 추상화 => 구체화
 * 					=> 한 개의 클래스로 
 * 			-----------------------------------------------------
 * 			*** 멤버변수
 * 				------
 * 				 ㅣ 따로 사용 => 인스턴스 변수	
 * 				 ㅣ 한개 사용 => 정적 변수
 * 				------------------------- 데이터베이스 (정규화)
 * 					=> 값 => 취미
 * 							영화, 낚시, 쇼핑 => JOIN
 * 			-----------------------------------------------------
 * 				클래스의 구성요소 => 5장
 * 					class A
 * 					{
 * 						-----------------
 * 						데이터 선언 ==> 데이터의 손실, 변질 방지 => 은닉화
 * 							 		 private
 * 							멤버변수 : new 이용할 때마다 따로 저장되는 공간을 만들어서 사용	 
 * 							정적변수 : 한 개만 생성 => 공유 (static)
 * 							=> private 데이터형 변수명;
 * 								=> 읽기/쓰기
 * 								=> 은닉화 VS 캡슐화
 * 								=> 정적변수 VS 인스턴스변수의 사용처
 * 						-----------------
 * 						데이터 초기화
 * 							생성자
 * 								1) 특징
 * 									= 클래스명
 * 									= 리턴형이 없다
 * 									= 여러개 사용 가능 (오버로딩)
 * 									  ** 오버로딩 (기능 추가)
 * 										 메소드명 동일
 * 										 매개변수의 갯수나 데이터형이 다르다.
 * 										 리턴형은 관계없다.
 * 										 ** 생성자는 필요시에만 사용
 * 											=> 생성자가 없는 경우에는 자동 디폴트 생성자 생성
 * 																	 ----------
 * 																	  ㅣ 매개변수가 없는 생성
 * 								2) 역할
 * 									= 멤버변수에 초기화
 * 									= 메모리 저장시에 호출되는 메소드
 * 							초기화 블록 : 컴파일러에 의해 자동 호출
 * 								= 인스턴스 블록
 * 									{
 * 										멤버변수, 정적변수, 멤버메소드, 정적메소드 사용 가능
 * 										------ 생성자 => 생성자를 반드시 호출
 * 									}
 * 								= 정적 블록 ==> MyBatis
 * 									static
 * 									{
 * 										정적변수만 초기화 가능 (static)
 * 										------ 자동 초기화
 * 									}
 * 						-----------------
 * 						데이터 활용
 * 							메소드 ===> 다른 클래스와 통신 (연결) => public
 * 							----
 * 							1) 종류
 * 								= 일반멤버메소드
 * 									[접근지정어] 리턴형 메소드(매개변수 목록)
 * 									{
 * 										---- 기능
 * 									}
 * 								= 정적메소드
 * 									[접근지정어] static 리턴형 메소드(매개변수)
 * 									{
 * 										==> 멤버변수를 활용하지 않는 경우 (공통으로 적용하는 기능)
 * 									}
 * 									==> 윈도우 : 모든 클래스에서 적용 => 이미지 크기 조절
 * 									==> 웹 : 한글 변환 ==> ISO
 * 								= 종단메소드 : 오버라이딩 
 * 								= 추상메소드
 * 						-----------------
 * 					}
 * 				객체지향의 3대 특성 => 6장
 * 					=
 * 				클래스의 종류 => 7장
 * 					= 추상클래스
 * 					
 * 					= 인터페이스 => 추상클래스의 일종
 * 					= 내부클래스
 * 						= 멤버클래스
 * 						= 익명의 클래스
 * 				사전에 에러 방지 => 8장
 * 				--------------- 기본 문법
 * 				라이브러리 => 조립 => 9~15장
 * 					=> String, IO, Collection ==> SQL => NetWork
 */
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
// 오버라이딩(재정의) => 기본(상속) => 속도 (상속(X)) => 익명의 클래스를 이용하면 재정의가 된다.
public class MainClass2 extends JFrame{
	JTable table;
	DefaultTableModel model;
	
	public MainClass2()
	{
		String[] col= {"번호", "이름", "성별", "주소", "전화"};
		String[][] row=new String[0][5];
		model=new DefaultTableModel(row, col)
		{

			@Override
			public boolean isCellEditable(int row, int column) {
				// TODO Auto-generated method stub
				return super.isCellEditable(row, column);
			}
			 
		};
		table=new JTable(model);
		JScrollPane js=new JScrollPane(table);
		
		add("Center", js);
		String[] data= {"1","홍길동", "남자", "서울", "010-1111-1111"};
		for(int i=0;i<10;i++)
		{
			model.addRow(data);
		}
		setSize(640, 480);
		setVisible(true);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new MainClass2();
	}

}
