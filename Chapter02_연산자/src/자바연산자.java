/*
 * 		연산자 / 피연산자 (대상)
 * 		----- 연산자
 * 		
 * 		10 + 20 => 10, 20: 피연산자
 * 				   +: 연산자
 * 
 * 		피연산자 1개 (단항연산자)
 * 			  2개 (이항연산자)
 * 			  3개 (삼항연산자)
 * 
 * 		단항연산자
 * 			= 증감연산자 (한개를 증가, 한개를 감소할 때 사용) ++,-- (반복문에서 자주 사용)
 * 				int a=10;
 * 				++a; ==> a=11
 * 			= 부정연산자 : boolean만 사용 가능 =!
 * 				boolean b=false;
 * 				b=!b; ==> true 
 * 			= 형변환연산자 : (int)'A'
 * 				= UpCasting : 작은 데이터형을 큰 데이터형으로
 * 					자동 형변환
 * 					int a='A' ==> a=65
 * 				= DownCasting : 큰 데이터형을 작은 데이터형으로 (int)10.5 double -> int
 * 					강제 형변환
 * 			= 기타 ~: 반전연산자(양수<=>음수) , . , []
 * 
 * 		이항연산자
 * 			= 산술연산자 (+ , - , * , / , %)
 * 				+ : 산술 연산, 문자열 결합
 * 					5+6=11
 * 					"5"+6="56" => 결합되고 문자열 형태로 반환
 * 					"7"+7+7="777"
 * 					7+7+"7"="147"
 * 					
 * 					데이터형 자동 변경
 * 					------------
 * 					int + double => double
 * 					10+10.5 => 10.0+10.5
 * 
 * 					'a'+10
 * 					---
 * 					97+10 => 107
 * 
 * 					int+long => long
 * 					int+double => double
 * 					long+double => double
 * 					----------------------
 * 					char+char => int
 * 					byte+byte => int
 * 					char+byte => int
 * 					----------------------
 * 				/ : 나누기
 * 					1) 정수/정수 = 정수
 * 						10/3 ==> 3 (소수점은 다 삭제됨)
 * 					2) 0으로 나누면 오류가 발생	
 * 						==> 단위테스트 (Junit)
 * 				% : 나머지 (짝수, 홀수, 배수 등에 쓰임)
 * 					10%3 ==> 1 나눈 후 나머지 값
 * 					10/2 ==> 5 , 10%2 ==> 0
 * 			
 * 					==> 5%2 == 1
 * 						-5%2 == -1
 * 						5%-2 == 1
 * 						-5%-2 == -1
 * 						------------ 앞의 숫자(왼쪽편)에 따라 부호가 결정된다.
 * 
 * 			= 쉬프트연산자 (<< , >>) 비트이동 연산자
 * 				10<<2 ==> 40 10*2^2
 * 				11<<3 ==> 88 11*2^3
 * 
 * 				10>>2 ==> 2 10/2^2
 * 
 * 			= 비트연산자 (& , | , ^)
 * 				&(*) |(+) ^(같으면 0, 다르면 1)
 * 
 * 				--------------------------
 * 						&(*)	|(+)	^
 * 				--------------------------
 * 				0 0		0		0		0
 * 				--------------------------
 * 				0 1		0		1		1
 * 				--------------------------
 * 				1 0		0		1		1
 * 				--------------------------
 * 				1 1		1		1		0
 * 				--------------------------
 * 
 * 				10 & 14
 * 				10 == 1010
 * 				14 == 1110
 * 					 ------& (위아래로 계산)
 * 					  1010 ==> 2+8 ==> 10
 * 
 * 				21 & 6
 * 				21 == 10101
 * 				6  == 00110
 * 					  -----&
 * 					  00100 ==> 4         이진법 변환: Integer.toBinaryString(숫자)
 * 
 * 				10 | 14
 * 				1010
 * 				1110
 * 				----|
 * 				1110 ==> 14
 * 
 * 				10^14
 * 				1010
 * 				1110
 * 				----^
 * 				0100 ==> 4
 * 
 * 			= 비교연산자 (== , != , < , > , <= , >=)
 * 				결과값 : 무조건 boolean (true/false)
 * 				6==7 false
 * 				6!=7 true
 * 				6<7  true
 * 				6>7  false
 * 				6<=7 true
 * 				==> 정수/실수/문자/논리(==, !=) ==> 문자열은 계산할 수 없다
 * 									  ------
 * 										equals() , compare()
 * 				같다, 같지않다
 * 				자바: ==, !=
 * 				오라클: =, <>
 * 				자바스크립트: ===, !==
 * 
 * 			= 논리연산자 (&& , ||)
 * 				&& : 직렬연산자
 * 				|| : 병렬연산자
 * 				------------
 * 				(조건)&&(조건)
 * 				----   ----
 * 				 ㅣ	    ㅣ
 * 				  ------
 * 					ㅣ
 * 					결과
 * 								&&		||
 * 				-----------------------------
 * 				true true		true	true
 * 				-----------------------------
 * 				true false		false	true
 * 				-----------------------------
 * 				false true		false	true
 * 				-----------------------------
 * 				false false		false	false
 * 				-----------------------------
 * 				&& : 범위나 기간 포함    90부터 100까지 A 예약기간
 * 								score>=90 && score<=100
 * 				|| : 범위를 벗어난 경우
 * 
 * 			= 대입연산자 (= , += , -= , *= , /= , %= ...)
 * 						  ----------------------- 복합 대입 연산자 (여러개를 동시에 증가, 감소)
 * 				int a=10; 10을 a에 대입하라는 뜻(뒤에서부터)
 * 
 * 				int a=10;
 * 				int b=20;
 * 				int c=a+b; a+b를 c에 대입하라
 * 
 * 				int a=10;
 * 				a++; // 한개증가
 * 
 * 				int a=10;
 * 				a+=10
 * 				-----
 * 				  a=a+10 => a=20
 *
 *				int a=100;
 *				a+=20;
 *				a=a+20 => a=120
 *
 *				int a=100;
 *				a-=10;
 *				a=a-10 => a=90
 *  
 */
public class 자바연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(Integer.toBinaryString(0));
	}

}
