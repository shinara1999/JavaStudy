package com.sist.exception;
// 267 page 	예외처리의 기본
/*
 * 		가장 많이 사용된다. => 예외복구
 * 		try~catch~finally
 * 		1) 형식
 * 			try
 * 			{
 * 				에러없이 실행이 가능한 소스
 * 				// main ==> 정상수행하는 문장 => 개발자 실수, 사용자의 입력이 잘못되었을 때
 * 			}catch(Exception ex)
 * 			{
 * 				예외복구 ==> 다시 입력 요청 => 또는 다음 문장으로 넘어가기
 * 			} ==> catch는 예상되는 예외를 따라 처리 => 여러개 사용 가능
 * 
 * 		2) 동작 흐름
 * 
 * 			문장 1
 * 			문장 2
 * 			try ==> 전체 / 부분 => 에러가 발생할 수 있는 부분
 * 			{
 * 				문장 3
 * 				문장 4
 * 				문장 5
 * 			}catch(Exception e) => 에러 났을 때 처리하는 문장
 * 			{
 * 				문장 6
 * 			}
 * 			문장 7
 * 			문장 8
 * 
 * 			에러가 발생하지 않았을 경우
 * 			=> 문장 1 => 문장 2 => 문장 3 => 문장 4 => 문장 5 => 문장 7 => 문장 8
 * 
 * 			---------------------------------------------------------------
 * 
 * 			문장 1
 * 			문장 2
 * 			try
 * 			{
 * 				문장 3
 * 				문장 4 => int a=10/0 => 에러가 발생한 부분 ===> 에러 발생하면 catch로 이동하기 때문에 밑 문장은 수행하지 못한다.
 * 				문장 5
 * 			}catch(Exception e)
 * 			{
 * 				문장 6 ==> 복구 ==> 문장 3번으로 이동
 * 			}
 * 			문장 7
 * 			문장 8
 * 
 * 			문장 4에서 에러가 발생했을 경우
 * 			=> 문장 1 => 문장 2 => 문장 3 => 문장 6 => 문장 7 => 문장 8 
 * 	
 * 			----------------------------------------------------------------
 * 
 * 			문장 1
 * 			문장 2 => 에러가 발생한 부분
 * 			try
 * 			{
 * 				문장 3
 * 				문장 4 
 * 				문장 5
 * 			}catch(Exception e)
 * 			{
 * 				문장 6 
 * 			}
 * 			문장 7
 * 			문장 8
 * 
 * 			문장 2에서 에러가 발생했을 경우
 * 			=> 문장 1 => 종료 ===> 비정상 종료
 * 
 * 			----------------------------------------------------------------
 * 
 * 			try절 안에는 정상으로 수행하는 문장이 들어간다.
 * 				=> 개발자 실수 , 사용자 입력값으로 인한 에러발생
 * 												------- 종료 => 종료방지를 위해 catch 수행
 * 
 * 			*** 수행문장에 이상이 없는 경우 (에러가 없는 경우)
 * 				try { 소스 }
 * 			*** 수행문장에 이상이 있는 경우 (에러가 있는 경우)
 * 				catch
 */
public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
